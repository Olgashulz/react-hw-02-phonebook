{"version":3,"sources":["components/Form/Form.js","components/Contacts/Contacts.js","App.js","index.js"],"names":["Form","state","contacts","name","number","handleInputChange","event","console","log","currentTarget","value","setState","handleSubmit","preventDefault","props","addNewContact","onSubmit","this","type","onChange","Component","Contacts","onDeleteContact","className","map","id","onClick","proTotypes","PropTypes","array","isRequired","func","App","data","contact","shortid","generate","prevState","deleteContact","contactId","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAIMA,E,4MACFC,MAAQ,CACJC,SAAU,GACVC,KAAM,GACNC,OAAQ,I,EAGZC,kBAAoB,SAACC,GACjBC,QAAQC,IAAIF,EAAMG,cAAcC,OAEhC,EAAKC,SAAL,eAAiBL,EAAMG,cAAcN,KAAOG,EAAMG,cAAcC,S,EAIpEE,aAAe,SAACN,GACZA,EAAMO,iBACNN,QAAQC,IAAI,EAAKP,OACjB,EAAKa,MAAMC,cAAc,EAAKd,Q,4CAOlC,WACI,OACI,uBAAMe,SAAUC,KAAKL,aAArB,UACI,yCAEI,uBACIM,KAAK,OACLf,KAAK,OACLO,MAAOO,KAAKhB,MAAME,KAClBgB,SAAUF,KAAKZ,uBAMvB,2CAEI,uBACIa,KAAK,MACLf,KAAK,SACLO,MAAOO,KAAKhB,MAAMG,OAClBe,SAAUF,KAAKZ,uBAOvB,wBAAQa,KAAK,SAAb,gC,GApDGE,aA+DJpB,I,gBChETqB,EAAW,SAAC,GAAD,IAAGnB,EAAH,EAAGA,SAAUoB,EAAb,EAAaA,gBAAb,OACb,oBAAIC,UAAU,eAAd,SACKrB,EAASsB,KAAI,gBAAGrB,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQqB,EAAjB,EAAiBA,GAAjB,OACV,+BACKtB,EADL,IAEI,+BAAOC,IACP,wBAAQsB,QAAS,kBAAMJ,EAAgBG,IAAvC,sBAHKA,SASrBJ,EAASM,WAAa,CAClBzB,SAAU0B,IAAUC,MAAMC,WAC1BR,gBAAiBM,IAAUG,KAAKD,YAGrBT,QCdTW,E,4MACJ/B,MAAQ,CACNC,SAAU,I,EAGZa,cAAgB,SAAAkB,GACd1B,QAAQC,IAAI,EAAKP,MAAMC,UAEvB,IAAMgC,EAAU,CACdT,GAAIU,IAAQC,WACZjC,KAAM8B,EAAK9B,KACXC,OAAQ6B,EAAK7B,QAGfG,QAAQC,IAAI0B,GACZ,EAAKvB,UAAS,SAAA0B,GAAS,MAAK,CAC1BnC,SAAS,CAAEgC,GAAH,mBAAeG,EAAUnC,eAGnCK,QAAQC,IAAI,EAAKP,Q,EAGnBqC,cAAgB,SAACC,GACf,EAAK5B,UAAS,SAAA0B,GAAS,MAAK,CAC1BnC,SAAUmC,EAAUnC,SAASsC,QAAO,SAAAN,GAAO,OAAIA,EAAQT,KAAOc,U,4CAKlE,WACE,OACE,qCACE,2CACA,cAAC,EAAD,CAAMxB,cAAeE,KAAKF,gBAC1B,0CACA,cAAC,EAAD,CAAUb,SAAUe,KAAKhB,MAAMC,SAAUoB,gBAAiBL,KAAKqB,uB,GAnCrDlB,aAyCHY,ICzCfS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f6a282d9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        contacts: [],\r\n        name: '',\r\n        number: ''\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        console.log(event.currentTarget.value)\r\n        // console.log(event.currentTarget.name)\r\n        this.setState({ [event.currentTarget.name]: event.currentTarget.value })\r\n\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        console.log(this.state);\r\n        this.props.addNewContact(this.state)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <label>\r\n                    Name\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={this.state.name}\r\n                        onChange={this.handleInputChange}\r\n                    // pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    // title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    // required\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Number\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleInputChange}\r\n                    // pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    // title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    // required\r\n                    />\r\n\r\n                </label>\r\n                <button type=\"submit\">Add contact</button>\r\n            </form>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    addNewContact: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Contacts = ({ contacts, onDeleteContact }) => (\r\n    <ul className=\"contactsList\">\r\n        {contacts.map(({ name, number, id }) => (\r\n            <li key={id}>\r\n                {name}:\r\n                <span>{number}</span>\r\n                <button onClick={() => onDeleteContact(id)}>Delete</button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nContacts.proTotypes = {\r\n    contacts: PropTypes.array.isRequired,\r\n    onDeleteContact: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Contacts;\r\n","import React, { Component } from \"react\";\nimport shortid from 'shortid';\n\nimport Form from './components/Form';\nimport Contacts from './components/Contacts'\n\nclass App extends Component {\n  state = {\n    contacts: []\n  }\n\n  addNewContact = data => {\n    console.log(this.state.contacts)\n\n    const contact = {\n      id: shortid.generate(),\n      name: data.name,\n      number: data.number\n    }\n\n    console.log(contact)\n    this.setState(prevState => ({\n      contacts: [contact, ...prevState.contacts]\n\n    }))\n    console.log(this.state)\n  }\n\n  deleteContact = (contactId) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n\n    }))\n  }\n\n  render() {\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <Form addNewContact={this.addNewContact} />\n        <h2>Contacts</h2>\n        <Contacts contacts={this.state.contacts} onDeleteContact={this.deleteContact} />\n      </>\n    )\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}